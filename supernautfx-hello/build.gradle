plugins {
    id 'application'
}

apply plugin: "org.openjfx.javafxplugin"
apply plugin: "org.beryx.jlink"

def appName = 'SupernautFX Hello'
mainClassName = "$moduleName/org.consensusj.supernautfx.sample.hello.HelloForegroundApp"

sourceCompatibility = 11
targetCompatibility = 11

configurations {
    // Add the 'toVerify' configuration so we can use the following Gradle command
    // `./gradlew --write-verification-metadata sha256 supernautfx-hello:dowloadJavaFXPlatformJars buildJPackages``
    // to build `./gradle/verification-metadata.xml` for verify dependency checksums
    toVerify
}

dependencies {
    implementation project (':supernautfx')

    annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"

    implementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    toVerify "org.openjfx:javafx-base:$javaFxVersion:mac"
    toVerify "org.openjfx:javafx-graphics:$javaFxVersion:mac"
    toVerify "org.openjfx:javafx-controls:$javaFxVersion:mac"
    toVerify "org.openjfx:javafx-fxml:$javaFxVersion:mac"

    toVerify "org.openjfx:javafx-base:$javaFxVersion:linux"
    toVerify "org.openjfx:javafx-graphics:$javaFxVersion:linux"
    toVerify "org.openjfx:javafx-controls:$javaFxVersion:linux"
    toVerify "org.openjfx:javafx-fxml:$javaFxVersion:linux"

    toVerify "org.openjfx:javafx-base:$javaFxVersion:win"
    toVerify "org.openjfx:javafx-graphics:$javaFxVersion:win"
    toVerify "org.openjfx:javafx-controls:$javaFxVersion:win"
    toVerify "org.openjfx:javafx-fxml:$javaFxVersion:win"
}

task dowloadJavaFXPlatformJars(type: Copy) {
    from configurations.toVerify
    into "${buildDir}/verificationJars"
}

patchModules.config = [
        "java.annotation=jsr305-3.0.2.jar"
]

javafx {
    version = javaFxVersion
    modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}

def os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = appName
        jvmArgs = []
    }
    mergedModule {
        requires 'java.logging'

        requires 'javafx.graphics'
        requires 'javafx.controls'
        requires 'javafx.fxml'

        forceMerge 'org.slf4j'
    }
    jpackage {
        // See https://badass-jlink-plugin.beryx.org/releases/latest/#_jpackage for
        // where the plugin's jpackage task finds the path to the jpackage tool by default
        if (Boolean.getBoolean('download.jpackage')) {
            jpackageHome = rootProject.ext.jpackageHome
        }
        skipInstaller = false

        // Massage version string to be compatible with jpackage installers
        // for the current OS platform
        def appVersionForJpackage = normalizeAppVersion(version)

        imageOptions = ["--verbose", "--app-version", appVersionForJpackage]
        installerOptions = ["--app-version", appVersionForJpackage]
        if (os.macOsX) {
            imageOptions += [ '--resource-dir', "${projectDir}/src/macos/resource-dir" ]
            if (rootProject.ext.signJPackageImages) {
                logger.warn "Setting --mac-sign in jpackage imageOptions"
                imageOptions += [ '--mac-sign' ]
            }
        } else if (os.windows) {
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        }

    }
}

if (Boolean.getBoolean('download.jpackage')) {
    jpackage.dependsOn rootProject.expandJPackage
}
