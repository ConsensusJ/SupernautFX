plugins {
    id 'groovy'
    id 'application'
    id 'org.openjfx.javafxplugin'           version '0.0.8'
    id 'org.beryx.jlink'                    version '2.17.1'
    id 'org.javamodularity.moduleplugin'    version "1.5.0"
    id 'de.undercouch.download'             version "4.0.0"
}

def appName = 'SupernautFX Hello'
mainClassName = "$moduleName/org.consensusj.supernautfx.sample.hello.HelloSupernautFxApp"

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation project (':supernautfx')

    implementation "javax.inject:javax.inject:1"
    implementation "io.micronaut:micronaut-inject-java:${micronautVersion}"

    implementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
}

patchModules.config = [
        "java.annotation=jsr305-3.0.2.jar"
]

javafx {
    version = javaFxVersion
    modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

test {
    moduleOptions {
        runOnClasspath = true
    }
}

ext.os = org.gradle.internal.os.OperatingSystem.current()
def signImage = false

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = appName
        jvmArgs = []
    }
    mergedModule {
        requires 'java.logging'

        requires 'javafx.graphics'
        requires 'javafx.controls'
        requires 'javafx.fxml'

        forceMerge 'org.slf4j'
    }
    jpackage {
        // See https://badass-jlink-plugin.beryx.org/releases/latest/#_jpackage for
        // where the plugin's jpackage task finds the path to the jpackage tool by default
        if (Boolean.getBoolean('download.jpackage')) {
            jpackageHome = downloadJPackage()
        }
        skipInstaller = false

        // Massage version string to be compatible with jpackage installers
        // for the current OS platform
        def appVersionForJpackage = normalizeAppVersion(version)

        imageOptions = ["--verbose", "--app-version", appVersionForJpackage]
        installerOptions = ["--app-version", appVersionForJpackage]
        if (os.macOsX) {
            imageOptions += [ '--resource-dir', "${projectDir}/src/macos/resource-dir" ]
            if (signImage) {
                imageOptions += [ '--mac-sign' ]
            }
        }
    }
}

/**
 * Massage the version string based upon the current OS to be valid
 * for the installer platforms for that OS. rpmbuild, MSI, and potentially
 * others have restrictions on valid version strings.
 *
 * @param appVersion A typical Gradle version string
 * @return a version string that should work for the currrent platform
 */
String normalizeAppVersion(final String appVersion) {
    if (os.linux) {
        // Replace '-' with '.' for rpmbuild
        return appVersion.replace('-', '.')
    } else if (os.windows) {
        // This is a hack attempt to assure the version conforms to MSI productVersion string rules
        // See https://docs.microsoft.com/en-us/windows/win32/msi/productversion
        // For now, we'll just remove '-SNAPSHOT' if present.
        return appVersion.replaceAll('-SNAPSHOT$', '')
    } else {
        return appVersion
    }
}

// #### The code below is needed only if you use the downloadJPackage() method to install the jpackage tool ####
// Code copied from build.gradle in https://github.com/beryx/fxgl-sliding-puzzle/

/** @return  [url, extension, directory] */
String[] getJPackageCoordinates() {
    // def jpackageBaseUrl = 'https://download.java.net/java/early_access/jdk14/34/GPL''
    def jpackageBaseUrl = 'https://s3-us-west-2.amazonaws.com/static.msgilligan.com/jpackage'
    def jpackageVersionString = 'openjdk-14-ea%2B34'

    if(os.macOsX) return [
            "${jpackageBaseUrl}/${jpackageVersionString}_osx-x64_bin.tar.gz",
            'tar.gz',
            'jdk-14.jdk/Contents/Home'
    ]
    if(os.windows) return [
            "${jpackageBaseUrl}/${jpackageVersionString}_windows-x64_bin.zip",
            'zip',
            'jdk-14'
    ]
    return [
            "${jpackageBaseUrl}/${jpackageVersionString}_linux-x64_bin.tar.gz",
            'tar.gz',
            'jdk-14'
    ]
}

String downloadJPackage() {
    def (url, extension, directory) = getJPackageCoordinates()
    def downloadDir = "$buildDir/download"
    tasks.jpackageImage.doFirst {
        def execExt = os.windows ? '.exe' : ''
        if(!file("$downloadDir/$directory/bin/jpackage$execExt").file) {
            def jdkArchivePath = "$downloadDir/jdk-jpackage.$extension"
            download {
                src url
                dest jdkArchivePath
                overwrite false
            }
            copy {
                from ((extension == 'tar.gz') ? tarTree(resources.gzip(jdkArchivePath)) : zipTree(jdkArchivePath))
                into downloadDir
            }
        }
    }
    return "$downloadDir/$directory"
}
